buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "de.dfki.mary:gradle-marytts-crossvalidation-plugin:0.1-SNAPSHOT"
        classpath "org.m2ci.msp:jtgt:0.5.3"
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-festvox' version '5.2.2'
    id 'de.dfki.mary.voicebuilding-legacy' version '5.2.2'
    id 'de.undercouch.download' version '3.2.0'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

apply plugin: 'de.dfki.mary.voicebuilding.marytts-crossvalidation'

voice {
    name = 'cmu-rms'
    language = 'en'
    region = 'US'
    gender = 'male'
    type = 'unit selection'
    description = 'A male US English unit selection voice, built from recordings provided by Carnegie Mellon University'
    license {
        name = 'Arctic License'
        shortName = 'Arctic'
        url = 'http://mary.dfki.de/download/arctic-license.html'
    }
    samplingRate = 16000
}

repositories {
    ivy {
        url 'http://mary.dfki.de/repo'
        layout 'maven'
    }
    ivy {
        url 'http://festvox.org/cmu_arctic/cmu_arctic/packed/'
        layout 'pattern', {
            artifact '[module]-[revision]-[classifier].[ext]'
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_us_rms_arctic', version: '0.95', classifier: 'release', ext: 'tar.bz2'
}

import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonBuilder
import org.m2ci.msp.jtgt.io.*
import marytts.util.io.BasenameList

task downloadMausLabFiles(type: Download) {
    src 'https://github.com/insa-k/voice-cmu-rms-maus-data/releases/download/MAUS-lab/lab.zip'
    dest "$buildDir/lab.zip"
    overwrite false
    onlyIfNewer true
}

task unpackLab(type: Copy) {
    from zipTree("$buildDir/lab.zip"), {
        include '**/lab/*.lab'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/lab"
    includeEmptyDirs = false
    dependsOn downloadMausLabFiles
}

String[] getCvExcludeList(File cvExcludeListFile) {
    if (cvExcludeListFile.length() > 0 ) {
        def cvExcludeList = new BasenameList(cvExcludeListFile.path)
        return cvExcludeList.getListAsArray()
    }
    else {
        return []
    }
}

void updateCvExcludeList(File cvExcludeListFile, File cvFile) {
    def cvList = new BasenameList(cvFile.path)
    if (cvExcludeListFile.length() > 0 ) {
        def cvExcludeList = new BasenameList(cvExcludeListFile.path)
        cvExcludeList.add(cvList.getListAsArray())
        cvExcludeList.write(cvExcludeListFile)
    }
    else {
        def cvExcludeList = new BasenameList()
        cvList.write(cvExcludeListFile)
    }
}

double calculateFoldLength(double k, double x) {
    // for a k-fold crossvalidation
    double y = x / k
    // round this number up
    if(y % 1 != 0 ) {
        return y.trunc() + 1
    }
    else {
        return y
    }
}

selectCrossvalidationFiles {
    // for a 10-fold crossvalidation
    dependsOn lab, wav, text

    ext.cvResultsDir = project.file("$projectDir/crossvalidation-maus")
    ext.cvExcludeListFile = project.file("$cvResultsDir/cvExcludeList.lst")

    doFirst {
        if (!cvResultsDir.exists()) {
            cvResultsDir.mkdir()
        }

        if (!(cvExcludeListFile.exists())) {
            cvExcludeListFile.createNewFile()
        }

        // total number of files minus those excluded from the voicebuilding process
        def x = wav.destDir.listFiles().length - 6
        def y = calculateFoldLength(10, x)
        selectCrossvalidationFiles.nbCvFiles = y
        selectCrossvalidationFiles.cvExcludeList = getCvExcludeList(cvExcludeListFile)
    }
    selectCrossvalidationFiles.excludeList = ["arctic_a0438", "arctic_a0439", "arctic_b0391", "arctic_b0152", "arctic_a0324", "arctic_a0325"]
    ext.cvFile = selectCrossvalidationFiles.cvFile
    doLast {
        if (cvFile.length() > 0) {
            updateCvExcludeList(cvExcludeListFile, cvFile)
        }
    }
}

generateCrossvalidationInputFiles{
    dependsOn selectCrossvalidationFiles
    onlyIf {
        selectCrossvalidationFiles.cvFile.length() > 0
    }
}

moveReferenceFiles {
    ext.refDir = moveReferenceFiles.refDir
    onlyIf {
        selectCrossvalidationFiles.cvFile.length() > 0
    }
}

legacyInit.dependsOn wav, text, unpackLab, selectCrossvalidationFiles, generateCrossvalidationInputFiles, moveReferenceFiles

synthesizeCrossvalidationAudio {
    onlyIf {
        selectCrossvalidationFiles.cvFile.length() > 0
    }
}

getRealisedDurations{
    dependsOn synthesizeCrossvalidationAudio
    ext.outputDir = getRealisedDurations.destDir
    onlyIf {
        selectCrossvalidationFiles.cvFile.length() > 0
    }
}

runCrossvalidation {
    dependsOn getRealisedDurations, synthesizeCrossvalidationAudio
    doLast{
        createPlottingData(runCrossvalidation.timestamp)
    }
    onlyIf {
        selectCrossvalidationFiles.cvFile.length() > 0
    }
}

Map retrieveDurations(File labFile) {
    def map = [:]
    def xLabSer = new XWaveLabelSerializer()
    def tg = xLabSer.fromString(labFile.text)
    def nbPhones = 0
    def length = 0
    tg.tiers.find { it.name == 'phones'}.annotations.each {
        // exclude the silences
        if (it.getText() != "_") {
            nbPhones++
            length += it.getEnd() - it.getStart()
        }
    }
    map.put("nbPhones", nbPhones)
    map.put("length", length)
    return map
}

void createPlottingData(String timestamp) {
    def resultsDir = project.file("${selectCrossvalidationFiles.cvResultsDir}/results")
    if(!(resultsDir.exists())) {
        resultsDir.mkdir()
    }
    def jsonFile = project.file("$resultsDir/maus-results${timestamp}.json")
    if (!(jsonFile.exists())) {
        jsonFile.createNewFile()
    }
    def rmslsfResults = project.file("$buildDir/crossvalidation/rmslsfdistortion-results-${timestamp}.txt")
    def json = []
    def xLabSer = new XWaveLabelSerializer()
    rmslsfResults.eachLine { line, count ->
        if (!(count == 1)) {
            line.splitEachLine(' ') { items ->
                if (!items[0].equals("Global")) {
                    def refFile = project.file("${moveReferenceFiles.refDir}/${items[0]}.lab")
                    def synthFile = project.file("${getRealisedDurations.outputDir}/${items[0]}.lab")
                    def refMap = retrieveDurations(refFile)
                    def synthMap = retrieveDurations(synthFile)
                    json <<
                            ["filename"            : items[0],
                             "labeler"             : "MAUS",
                             "mean"                : Double.parseDouble(items[2]),
                             "stddev"              : Double.parseDouble(items[4]),
                             "nbPhones_original"   : refMap.get("nbPhones"),
                             "nbPhones_synthesized": synthMap.get("nbPhones"),
                             "length_original"     : refMap.get("length"),
                             "length_synthesized"  : synthMap.get("length")
                            ]
                }
            }
        }
        jsonFile.text = new JsonBuilder(json).toPrettyString()
    }

}